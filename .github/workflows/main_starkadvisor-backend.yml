- name: Prepare staging
  run: |
    set -e
    # 1) Validaciones en la raíz del repo
    test -f manage.py || { echo "❌ Falta manage.py en la RAÍZ"; exit 1; }
    test -f requirements.txt || { echo "❌ Falta requirements.txt en la RAÍZ"; exit 1; }
    test -d starkadvisorbackend || { echo "❌ Falta carpeta starkadvisorbackend/ en la RAÍZ"; exit 1; }

    STAGING="${{ runner.temp }}/staging"
    ZIP_PATH="${{ runner.temp }}/app.zip"
    rm -rf "$STAGING" && mkdir -p "$STAGING"

    # 2) Copiar solo lo necesario
    rsync -a ./ "$STAGING"/ \
      --exclude ".git/" --exclude ".github/" --exclude "venv/" --exclude ".venv/" \
      --exclude "__pycache__/" --exclude "*.pyc" --exclude "node_modules/" \
      --exclude "docs/" --exclude "tests/" --exclude ".DS_Store" \
      --exclude "chatbot/faq_model_2/"

    cd "$STAGING"

    # 3) Re-validar en staging (evita publicar vacío)
    test -f manage.py || { echo "❌ manage.py no llegó a staging"; exit 1; }
    test -f requirements.txt || { echo "❌ requirements.txt no llegó a staging"; exit 1; }
    test -d starkadvisorbackend || { echo "❌ starkadvisorbackend/ no llegó a staging"; exit 1; }

    # 4) Crear ZIP
    python3 - <<'PY'
import os, zipfile, sys
zp = os.environ["RUNNER_TEMP"] + "/app.zip"
with zipfile.ZipFile(zp, "w", zipfile.ZIP_DEFLATED) as z:
    for root, _, files in os.walk("."):
        for f in files:
            p = os.path.join(root, f)
            z.write(p, p)
print("ZIP listo:", zp)
with zipfile.ZipFile(zp) as z:
    names = z.namelist()
    required = ["manage.py", "requirements.txt", "starkadvisorbackend/"]
    for r in required:
        if not any(n==r or n.startswith(r) for n in names):
            print(f"❌ Falta {r} dentro del ZIP")
            sys.exit(1)
print("✅ ZIP contiene archivos clave")
PY
    echo "ZIP_PATH=$ZIP_PATH" >> $GITHUB_ENV

- name: Deploy to Azure WebApp
  uses: azure/webapps-deploy@v3
  with:
    app-name: starkadvisor-backend
    package: ${{ runner.temp }}/app.zip
