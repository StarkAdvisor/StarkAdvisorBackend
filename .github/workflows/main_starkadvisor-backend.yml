name: Deploy Django Backend (pre-checks, prebuilt deps)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  APP_NAME: "starkadvisor-backend"
  RESOURCE_GROUP: "rg-starkadvisor"
  PYTHON_VERSION: "3.11"
  THRESHOLD_MB: "120"      # alerta si el modelo local >120MB
  STRICT_SIZE: "false"     # pon "true" si quieres que falle por tamaño

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ---------- PRECHECKS: fallan si falta algo ----------
      - name: Preflight - validar estructura Django
        shell: bash
        run: |
          set -euo pipefail
          echo "Contenido raíz:"
          ls -la

          echo "Buscando manage.py (hasta 3 niveles)..."
          FOUND=$(find . -maxdepth 3 -type f -name manage.py | sed 's|^\./||' | tr '\n' ' ')
          echo "Encontrados: ${FOUND:-<ninguno>}"

          if [ ! -f manage.py ]; then
            echo "::error::manage.py NO está en la raíz del repo."
            if [ -n "${FOUND}" ]; then
              echo "::error::Parece estar en: ${FOUND}"
              echo "::error::Soluciones: (a) mueve tu proyecto a la raíz, o (b) cambia 'package:' en el paso Deploy a esa subcarpeta."
            else
              echo "::error::No se encontró NINGÚN manage.py en el repo."
            fi
            exit 1
          fi

          REQS=requirements.txt
          [ -f "$REQS" ] || { echo "::error::Falta $REQS"; exit 1; }

          [ -f starkadvisorbackend/wsgi.py ] || { echo "::error::Falta starkadvisorbackend/wsgi.py"; exit 1; }
          # Si usas settings/production.py, valida; si usas settings.py, comenta la línea siguiente:
          [ -f starkadvisorbackend/settings/production.py ] || { echo "::error::Falta starkadvisorbackend/settings/production.py"; exit 1; }

          echo "OK: estructura mínima verificada."

      - name: Preflight - revisar tamaño de carpeta del modelo (opcional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d chatbot/faq_model_2 ]; then
            SIZE_MB=$(du -sm chatbot/faq_model_2 | awk '{print $1}')
            echo "chatbot/faq_model_2: ${SIZE_MB} MB"
            if [ "$SIZE_MB" -gt "${THRESHOLD_MB}" ]; then
              echo "::warning::El modelo local pesa ${SIZE_MB}MB (> ${THRESHOLD_MB}MB). Considera excluirlo del ZIP (.oryxignore) y cargarlo desde Storage/HF en runtime."
              if [ "${STRICT_SIZE}" = "true" ]; then
                echo "::error::STRICT_SIZE=true: abortando por tamaño del modelo."
                exit 1
              fi
            fi
          else
            echo "No se encontró chatbot/faq_model_2 (sin problema)."
          fi

      # ---------- Configurar App Settings para NO usar build remoto ----------
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2A74A6406B2C4AE5BDE8385E609832AC }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0A35B1E80008457D8D59EF4E62EA9F08 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_958550156BE34115B59D23AC21EE820B }}

      - name: App Settings (run-from-package y sin Oryx)
        shell: bash
        run: |
          az webapp config appsettings set -g "$RESOURCE_GROUP" -n "$APP_NAME" --settings \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            DJANGO_SETTINGS_MODULE=starkadvisorbackend.settings.production \
            WEBSITES_PORT=8000 \
            DISABLE_COLLECTSTATIC=true

      # ---------- Empaquetar dependencias en .python_packages ----------
      - name: Vendorizar dependencias
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -t .python_packages/lib/site-packages
          find . -name '__pycache__' -type d -prune -exec rm -rf {} +
          rm -rf .git .github || true

      - name: Crear ZIP para OneDeploy
        shell: bash
        run: |
          zip -r app.zip . \
            -x "*/.git/*" -x ".github/*" -x "**/__pycache__/*"

      # Si tu manage.py estuviera en subcarpeta, cambia 'package: app.zip' por 'package: ./SUBCARPETA/app.zip'
      - name: Deploy a Azure (OneDeploy)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          package: app.zip

      - name: Restart app
        shell: bash
        run: az webapp restart -g "$RESOURCE_GROUP" -n "$APP_NAME"

      - name: URL
        shell: bash
        run: |
          HOST=$(az webapp show -n "$APP_NAME" -g "$RESOURCE_GROUP" --query defaultHostName -o tsv)
          echo "https://$HOST"
