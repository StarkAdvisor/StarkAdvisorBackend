name: Deploy Django Backend (pre-checks, prebuilt deps, hardened)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  APP_NAME: "starkadvisor-backend"
  RESOURCE_GROUP: "rg-starkadvisor"
  PYTHON_VERSION: "3.11"
  THRESHOLD_MB: "120"      # alerta si el modelo local >120MB
  STRICT_SIZE: "false"     # "true" -> falla por tamaño

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # -------- PRECHECKS (Estrictos) --------
      - name: Preflight — estructura Django
        shell: bash
        run: |
          set -euo pipefail
          echo "Contenido raíz:"; ls -la
          if [ ! -f manage.py ]; then
            echo "::error::manage.py NO está en la raíz del repo."
            echo "::error::Mueve el proyecto a raíz o ajusta el 'package:' en el deploy."
            exit 1
          fi
          [ -f requirements.txt ] || { echo "::error::Falta requirements.txt en raíz"; exit 1; }
          [ -f starkadvisorbackend/wsgi.py ] || { echo "::error::Falta starkadvisorbackend/wsgi.py"; exit 1; }
          [ -f starkadvisorbackend/settings/production.py ] || { echo "::error::Falta settings/production.py"; exit 1; }
          echo "OK: estructura mínima verificada."

      - name: Preflight — tamaño de modelo (opcional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d chatbot/faq_model_2 ]; then
            SIZE_MB=$(du -sm chatbot/faq_model_2 | awk '{print $1}')
            echo "chatbot/faq_model_2 => ${SIZE_MB} MB"
            if [ "$SIZE_MB" -gt "${THRESHOLD_MB}" ]; then
              echo "::warning::Modelo > ${THRESHOLD_MB}MB. Considera excluirlo del ZIP y cargarlo desde Storage/HF."
              [ "${STRICT_SIZE}" = "true" ] && { echo "::error::STRICT_SIZE=true -> abortando."; exit 1; }
            fi
          else
            echo "No hay carpeta chatbot/faq_model_2 (ok)."
          fi

      # -------- Azure Login (OIDC) --------
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2A74A6406B2C4AE5BDE8385E609832AC }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0A35B1E80008457D8D59EF4E62EA9F08 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_958550156BE34115B59D23AC21EE820B }}

      # -------- App Settings (Run-From-Package + envs + PYTHONPATH + startup) --------
      - name: App Settings (run-from-package + envs + startup)
        shell: bash
        run: |
          set -euo pipefail
          az webapp config appsettings set -g "$RESOURCE_GROUP" -n "$APP_NAME" --settings \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            DISABLE_COLLECTSTATIC=true \
            DJANGO_SETTINGS_MODULE=starkadvisorbackend.settings.production \
            DATABASE_URL='${{ secrets.BACKEND_DATABASE_URL }}' \
            DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
            DJANGO_ALLOWED_HOSTS='${{ secrets.DJANGO_ALLOWED_HOSTS }}' \
            PYTHONUNBUFFERED=1 \
            # Asegura que el runtime vea deps vendorizadas
            PYTHONPATH="/home/site/wwwroot/.python_packages/lib/site-packages:/home/site/wwwroot" \
            WEBSITES_PORT=8000

          # Fijar comando de arranque (evita depender de Oryx autodetect)
          az webapp config set --resource-group "$RESOURCE_GROUP" --name "$APP_NAME" \
            --startup-file "gunicorn --workers 2 --timeout 60 --bind 0.0.0.0:8000 starkadvisorbackend.wsgi:application"

      # -------- Vendor deps (deps precompiladas en el paquete) --------
      - name: Vendorizar dependencias
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -t .python_packages/lib/site-packages
          find . -name '__pycache__' -type d -prune -exec rm -rf {} +
          rm -rf .git .github || true

      # -------- sitecustomize.py → Log Stream banner --------
      - name: Inyectar sitecustomize.py (Log Stream)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f sitecustomize.py ]; then
            cat > sitecustomize.py <<'PY'
import os, sys, time, platform, traceback, importlib
ts = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
print(f"[BOOT][{ts}Z] Python={platform.python_version()} PID={os.getpid()} CWD={os.getcwd()}", flush=True)
print(f"[BOOT] sys.path[0..4]={sys.path[:5]}", flush=True)
print(f"[BOOT] exists manage.py? {'YES' if os.path.exists(os.path.join(os.getcwd(),'manage.py')) else 'NO'}", flush=True)
try:
    m = importlib.import_module("starkadvisorbackend.wsgi")
    ok = hasattr(m, "application")
    print(f"[BOOT] import wsgi -> {'OK' if ok else 'NO application attr'}", flush=True)
except Exception:
    print("[BOOT] import wsgi FAILED"); traceback.print_exc()
PY
          fi

      # -------- Verificación de import WSGI usando deps vendorizadas --------
      - name: Preflight — importar WSGI (con deps vendorizadas)
        shell: bash
        run: |
          set -euo pipefail
          export PYTHONPATH="$(pwd)/.python_packages/lib/site-packages:$(pwd):$PYTHONPATH"
          python - <<'PY'
import importlib
m = importlib.import_module("starkadvisorbackend.wsgi")
assert hasattr(m, "application"), "WSGI no expone 'application'"
print("✅ WSGI importable y con 'application'")
PY

      # -------- Crear ZIP (Run-From-Package) y validarlo --------
      - name: Crear app.zip
        shell: bash
        run: |
          set -euo pipefail
          zip -r app.zip . -x "*/.git/*" -x ".github/*" -x "**/__pycache__/*"
          echo "ZIP listo:"
          unzip -l app.zip | head -n 40
          # Validar que el ZIP contiene lo esperado
          python - <<'PY'
import sys, zipfile
z=zipfile.ZipFile('app.zip'); names=z.namelist()
need=["manage.py","starkadvisorbackend/","starkadvisorbackend/wsgi.py",".python_packages/"]
def present(p): return any(n==p or n.startswith(p.rstrip('/')+'/') for n in names)
for r in need:
    if not present(r):
        print(f"❌ Falta {r} en ZIP"); sys.exit(1)
print("✅ ZIP contiene archivos clave")
PY

      # -------- Deploy (OneDeploy en modo Run-From-Package) --------
      - name: Deploy a Azure (OneDeploy)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          package: app.zip

      - name: Restart app
        shell: bash
        run: az webapp restart -g "$RESOURCE_GROUP" -n "$APP_NAME"

      # -------- Post-deploy check (GET / -> 200–399 + headers) --------
      - name: Verificación en producción (GET /)
        shell: bash
        run: |
          set -euo pipefail
          HOST=$(az webapp show -n "$APP_NAME" -g "$RESOURCE_GROUP" --query defaultHostName -o tsv)
          URL="https://${HOST}/"
          for i in {1..36}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 400 ]; then
              echo "✅ Producción responde $CODE en $URL"
              echo "---- HEADERS ----"; curl -sI "$URL" || true
              exit 0
            fi
            echo "… esperando a que inicie ($i/36) (HTTP $CODE)"; sleep 5
          done
          echo "::error::La app no respondió correctamente en producción ($URL)"; exit 1
