name: Deploy Django Backend (pre-checks, vendored deps, python-linux)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  APP_NAME: "starkadvisor-backend"
  RESOURCE_GROUP: "rg-starkadvisor"
  PYTHON_VERSION: "3.11"
  THRESHOLD_MB: "120"
  STRICT_SIZE: "false"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # -------- PRECHECKS --------
      - name: Preflight - estructura Django
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f manage.py ]; then
            echo "::error::manage.py NO está en la raíz del repo."
            exit 1
          fi
          if [ ! -f requirements.txt ]; then
            echo "::error::Falta requirements.txt en raíz"
            exit 1
          fi
          if [ ! -f starkadvisorbackend/wsgi.py ]; then
            echo "::error::Falta starkadvisorbackend/wsgi.py"
            exit 1
          fi
          if [ ! -f starkadvisorbackend/settings/production.py ]; then
            echo "::error::Falta starkadvisorbackend/settings/production.py (o cambia DJANGO_SETTINGS_MODULE)"
            exit 1
          fi
          echo "OK estructura mínima"

      - name: Preflight - tamaño de modelo (opcional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d chatbot/faq_model_2 ]; then
            SIZE_MB=$(du -sm chatbot/faq_model_2 | awk '{print $1}')
            echo "chatbot/faq_model_2: ${SIZE_MB} MB"
            if [ "$SIZE_MB" -gt "${THRESHOLD_MB}" ]; then
              echo "::warning::Modelo grande; considera excluirlo y cargarlo en runtime"
              if [ "${STRICT_SIZE}" = "true" ]; then
                echo "::error::STRICT_SIZE=true -> abortando"; exit 1
              fi
            fi
          fi

      # -------- LOGIN AZURE --------
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_2A74A6406B2C4AE5BDE8385E609832AC }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_0A35B1E80008457D8D59EF4E62EA9F08 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_958550156BE34115B59D23AC21EE820B }}

      # -------- GARANTIZAR RUNTIME PYTHON LINUX --------
      - name: Assert Python Linux stack (PYTHON|3.11) or fail
        shell: bash
        run: |
          set -euo pipefail
          APP="$APP_NAME"; RG="$RESOURCE_GROUP"
          INFO=$(az webapp show -n "$APP" -g "$RG" -o json)
          LINUX=$(echo "$INFO" | jq -r '.reserved // false')
          FX=$(echo "$INFO" | jq -r '.siteConfig.linuxFxVersion // ""')
          echo "linux=${LINUX} linuxFxVersion='${FX}'"
          if [ "$LINUX" != "true" ]; then
            echo "::error::La Web App no es Linux. Crea una Web App Linux con runtime PYTHON:3.11."
            exit 1
          fi
          if [ "$FX" != "PYTHON|3.11" ]; then
            az webapp config set -g "$RG" -n "$APP" --linux-fx-version "PYTHON|3.11" 1>/dev/null
            echo "Runtime forzado a PYTHON|3.11"
          fi

      # -------- APP SETTINGS --------
      - name: App Settings (envs + startup)
        shell: bash
        run: |
          set -euo pipefail
          az webapp config appsettings set -g "$RESOURCE_GROUP" -n "$APP_NAME" --settings \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            DISABLE_COLLECTSTATIC=true \
            DJANGO_SETTINGS_MODULE=starkadvisorbackend.settings.production \
            DATABASE_URL='${{ secrets.BACKEND_DATABASE_URL }}' \
            DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
            DJANGO_ALLOWED_HOSTS='${{ secrets.DJANGO_ALLOWED_HOSTS }}' \
            PYTHONUNBUFFERED=1 \
            PYTHONPATH="/home/site/wwwroot/.python_packages/lib/site-packages:/home/site/wwwroot" \
            WEBSITES_PORT=8000
          az webapp config set -g "$RESOURCE_GROUP" -n "$APP_NAME" \
            --startup-file "gunicorn --workers 2 --timeout 60 --bind 0.0.0.0:8000 starkadvisorbackend.wsgi:application"

      # -------- VENDOR DEPS --------
      - name: Vendorizar dependencias
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -t .python_packages/lib/site-packages
          find . -name '__pycache__' -type d -prune -exec rm -rf {} +
          rm -rf .git .github || true

      # -------- ZIP + VERIFICACIÓN (sin here-doc) --------
      - name: Crear ZIP para OneDeploy y validar contenido
        shell: bash
        run: |
          set -euo pipefail
          zip -r app.zip . -x "*/.git/*" -x ".github/*" -x "**/__pycache__/*"
          CHECKPY="$RUNNER_TEMP/check_zip.py"
          cat > "$CHECKPY" << 'PY'
import sys, zipfile
z = zipfile.ZipFile('app.zip'); names = z.namelist()
def present(p): return any(n == p or n.startswith(p.rstrip('/') + '/') for n in names)
need = ["manage.py", "starkadvisorbackend/", "starkadvisorbackend/wsgi.py", ".python_packages/"]
missing = [r for r in need if not present(r)]
if missing:
    print("WARNING: faltan en ZIP -> " + ", ".join(missing))
else:
    print("ZIP OK: archivos clave presentes")
PY
          python "$CHECKPY"

      # -------- DEPLOY --------
      - name: Deploy a Azure (OneDeploy)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          package: app.zip

      - name: Restart app
        shell: bash
        run: |
          set -euo pipefail
          az webapp restart -g "$RESOURCE_GROUP" -n "$APP_NAME"

      # -------- POST DEPLOY --------
      - name: Verificación (GET /)
        shell: bash
        run: |
          set -euo pipefail
          HOST=$(az webapp show -n "$APP_NAME" -g "$RESOURCE_GROUP" --query defaultHostName -o tsv)
          URL="https://${HOST}/"
          for i in {1..36}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 400 ]; then
              echo "OK ${CODE} ${URL}"
              curl -sI "$URL" || true
              exit 0
            fi
            echo "esperando ${i}/36 http ${CODE}"
            sleep 5
          done
          echo "::error::No respondió correctamente ${URL}"
          exit 1
